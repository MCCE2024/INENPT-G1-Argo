apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "api.fullname" . }}
  labels:
    {{- include "api.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "api.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "api.selectorLabels" . | nindent 8 }}
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - name: http
          containerPort: {{ .Values.app.port }}
          protocol: TCP
        env:
        - name: PORT
          value: {{ .Values.app.port | quote }}
        - name: NODE_ENV
          value: {{ .Values.app.nodeEnv | quote }}
        - name: TENANT_ID
          value: {{ .Values.env.TENANT_ID | quote }}
        - name: DB_HOST
          value: {{ .Values.database.host | quote }}
        - name: DB_PORT
          value: {{ .Values.database.port | quote }}
        - name: DB_NAME
          value: {{ .Values.database.name | quote }}
        - name: DB_USER
          value: {{ .Values.database.user | quote }}
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: api-db-secret
              key: password
        - name: DB_SSL
          value: {{ .Values.database.ssl | quote }}
        - name: DB_CA_CERT_PATH
          value: "/etc/ssl/certs/ca.pem"
        {{- with .Values.securityContext }}
        securityContext:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        volumeMounts:
        - name: ca-certificate
          mountPath: /etc/ssl/certs/ca.pem
          subPath: ca.pem
          readOnly: true
        {{- with .Values.resources }}
        resources:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 30
      volumes:
      - name: ca-certificate
        configMap:
          name: {{ .Values.database.caCertConfigMap | default "ca-certificate" }}
          items:
          - key: ca.pem
            path: ca.pem
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: api-service
  labels:
    app: api-service
    component: api
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 3000
      protocol: TCP
      name: http
  selector:
    {{- include "api.selectorLabels" . | nindent 4 }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: api-service-account
  labels:
    app: api-service
    component: api
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: api-service-network-policy
  labels:
    app: api-service
    component: api
spec:
  podSelector:
    matchLabels:
      {{- include "api.selectorLabels" . | nindent 6 }}
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
      ports:
        - protocol: TCP
          port: 3000
    - from:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: consumer
      ports:
        - protocol: TCP
          port: 3000
    - from:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: producer
      ports:
        - protocol: TCP
          port: 3000
    # Allow API to connect to itself (for health checks and internal calls)
    - from:
        - podSelector:
            matchLabels:
              {{- include "api.selectorLabels" . | nindent 14 }}
      ports:
        - protocol: TCP
          port: 3000
  egress:
    # Allow DNS resolution
    - to: []
      ports:
        - protocol: UDP
          port: 53
        - protocol: TCP
          port: 53
    # Allow external PostgreSQL connection (Aiven Cloud)
    - to: []
      ports:
        - protocol: TCP
          port: 21699
    # Allow HTTP/HTTPS for external APIs
    - to: []
      ports:
        - protocol: TCP
          port: 443
        - protocol: TCP
          port: 80
